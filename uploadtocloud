#!/bin/bash

setup() { 
    if az account show &> /dev/null; then
    echo "You are already logged in."
    else
    # Login
    az login --scope https://management.core.windows.net//.default
    echo "You're logged in."
    fi
    
}

copy_file() {

    echo "please enter the path to target file :" 
    read targetpath
    storage_array=($( az storage account list --query '[].name' --output tsv))
        if [[ ${#storage_array[@]} -eq 1 ]]; then
            storageAccount=${storage_array[0]}
        fi

        if [[ ${#storage_array[@]} -eq 0 ]]; then
            echo "You don't have a storage account, please create one to upload files!!"
            exit 1  # Exit with a non-zero status to indicate an error

        else
            for i in "${storage_array[@]}"; do
            echo "$i"
            done
        read -p "Please choose a storage account via a number : " mynum
        
        while [[ $mynum -lt 1 ]] || [[ $mynum -gt ${#storage_array[@]} ]]; do
            echo "please enter a valid number :"
            read mynum
        done   

        mynum=$((mynum-1))
        storageAccount=${storage_array[$mynum]}
        fi

    #get resource group and keys
    account_info=$(az storage account show --name "$storageAccount")
    resourceGroup=$(echo "$account_info" | jq -r '.resourceGroup')

    
    accountKey=$(az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query "[0].value" -o tsv)


    #get or create container for files
    container=$(az storage container list --account-name $storageAccount --account-key $accountKey --query "[].name" -o tsv)
    if [[ -z "$container" ]]; then
        echo "you have no containers, please create one"
    fi
    echo "resourcegroup is $resourceGroup , account Key is $accountKey , containers are $container"

    #check if file already exists
    echo "please enter name for blob :" 
    read blob_name

    existing_blob=$(az storage blob exists --account-name $storageAccount --account-key $accountKey --container-name $container --name $blob_name --output tsv)

    if [ "$existing_blob" == "True" ]; then
    
        # Handle synchronization (prompt user to overwrite, skip, or rename)
        echo "File $blob_name already exists in the cloud."
        read -p "Do you want to overwrite, skip, or rename? (o/s/r): " choice

        case $choice in
            o)
                echo "Overwriting the existing file..."
                az storage blob upload --account-name $storageAccount --account-key $accountKey --container-name $container --file $targetpath --name $blob_name --overwrite "true"
                if [ $? -eq 0 ]; then
                echo "The file has been successfully uploaded."
                else
                error_message=$(az storage blob upload --account-name $storageAccount --account-key $accountKey --container-name $container --file $targetpath --name myblob 2>&1)
                echo "Error uploading the file: $error_message"
                fi
                ;;
            s)
                echo "Skipping the file..."
                return
                ;;
            r)
                read -p "Enter a new name for the file: " new_name
                blob_name=$new_name
                echo "Renaming the file to $blob_name..."
                az storage blob upload --account-name $storageAccount --account-key $accountKey --container-name $container --file $targetpath --name $blob_name

                ;;
            *)
                echo "Invalid choice. Skipping the file..."
                return
                ;;
        esac
    else
        echo "uploading the file.. "
        az storage blob upload --account-name $storageAccount --account-key $accountKey --container-name $container --file $targetpath --name $blob_name
    fi


}


#azcopy make “https://<azure storage account name>.blob.core.windows.net/<container>” - #azcopy command to create container
# Install az cli
    if command -v az &> /dev/null; then
        setup

    else
        echo "Azure CLI is not installed, installing....."
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        setup
    fi
copy_file

#copy_file() {